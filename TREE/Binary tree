Binary tree implementation(inorder traversal , preorder  traversal , postorder  traversal , levelorder  traversal,buildtree)


#include <iostream>
using namespace std;
#include<queue>
class node{
      public:
      int data;
      node* left;
      node* right;
      
      
      node(int d){
            this->data=d;
            this->left=NULL;
            this->right=NULL;
      }
};
//create a binary tree
node* buildtree(node* root){
      cout<<"enter the data:"<<endl;
      int data;
      cin>>data;
      root=new node(data);
      if(data==-1){
            return NULL;
      }
      cout<<"enter the data of left node of"<<" "<<data<<endl;
      root->left=buildtree(root->left);
      cout<<"enter the data of right node of"<<" "<<data<<endl;
      root->right=buildtree(root->right);
      return root;
}
//level order traversal
void levelordetraversel(node* root){
      queue<node*> q;
      q.push(root);
      q.push(NULL);
      while(!q.empty()){
            node* temp=q.front();
            q.pop();
            if(temp==NULL){
                 cout<<endl;
                 if(!q.empty()){
                       q.push(NULL);
                 }
            }
            else{
                  cout<<temp->data<<"  ";
                  if(temp->left){
                        q.push(temp->left);
                  }
                   if(temp->right){
                        q.push(temp->right);
                  }
            }
      }
}
//inorder traversal
void inorder(node* root){
      if(root==NULL){
            return;
      }
      inorder(root->left);
      cout<<root->data<<"  ";
      inorder(root->right);
}
//preorder traversal
void preorder(node* root){
      if(root==NULL){
            return;
      }
      cout<<root->data<<"  ";
      preorder(root->left);
      preorder(root->right);
}
postorder traversal
void postorder(node* root){
      if(root==NULL){
            return;
      }
      postorder(root->left);
      postorder(root->right);
      cout<<root->data<<"  ";
}
int main(){
      node* root=NULL;
      root=buildtree(root);
      levelordetraversel(root);
      inorder(root);
      postorder(root);
      preorder(root);
}
