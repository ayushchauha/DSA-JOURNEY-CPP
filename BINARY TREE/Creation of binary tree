#include <iostream>
#include <queue>
using namespace std;
class node{
    public:
    int data;
    node* left;
    node* right;
    
      node(int data){
         this->data=data;
         this->left=NULL;
         this->right=NULL;
      }
};

//-------------------------------------------------------------------------->>>>>   CREATION OF BINARY TREE

node* buildtree(node* root){
      cout<<"Enter the data:"<<endl;
      int data;
      cin>>data;
      root = new node(data);
      if(data==-1){
            return NULL;
      }
      cout<<"Enter the data for left of:"<<data<<endl;
      root->left=buildtree(root->left);
      cout<<"Enter the data for right of:"<<data<<endl;
      root->right=buildtree(root->right);
      return root;
}

//---------------------------------------------------------------------------------->>>>LEVEL ORDER TRAVERSAL

void levelOrderTraversal(node* root){
      queue<node*> q;
      q.push(root);
      
      q.push(NULL);
      while(!q.empty()){
            node* temp=q.front();
            q.pop();
            if(temp==NULL){
                  cout<<endl;
                  if(!q.empty()){
                        q.push(NULL);
                  }
            }
            else{
                  cout<<temp->data<<" ";
                  if(temp->left){
                        q.push(temp->left);
                  }
                  if(temp->right){
                        q.push(temp->right);
                  }
            }
      }
}

//-------------------------------------------------------------------------------->>INORDER TRAVERSAL

void inorderTraveral(node* root){
      //base case
      if(root==NULL){
            return ;
      }
      //left part
      inorderTraveral(root->left);
      //print node
      cout<<root->data<<" ";
      //right part
      inorderTraveral(root->right);
}

//----------------------------------------------------------------------------->>PREORDER TRAVERSAL

void preorderTraveral(node* root){
      //base case
      if(root==NULL){
            return ;
      }
      //print node
      cout<<root->data<<" ";
      //left part
      preorderTraveral(root->left);
      //right part
      preorderTraveral(root->right);
}

//----------------------------------------------------------------------------->>POST ORDER TRAVERSAL

void postorderTraveral(node* root){
      //base case
      if(root==NULL){
            return ;
      }
      //left part
      postorderTraveral(root->left);
      //right part
      postorderTraveral(root->right);
      //print node
      cout<<root->data<<" ";
}

int main()
{
    node* root=NULL;
    root=buildtree(root);
    levelOrderTraversal(root);
    inorderTraveral(root);
    preorderTraveral(root);
    postorderTraveral(root);
    return 0;
}
