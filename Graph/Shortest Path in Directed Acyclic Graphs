#include <iostream>
#include<unordered_map>
#include<list>
#include<stack>
#include<vector>
#include<limits.h>
using namespace std;
class graph{
  public:
  unordered_map<int,list<pair<int,int>>> adj;
  
  void addedge(int u,int v,int weight){
        pair<int,int> p=make_pair(v,weight);
        adj[u].push_back(p);
  }
  
  void print(){
        for(auto i:adj){
              cout<<i.first;
              for(auto j:i.second){
                    cout<<"("<<j.first<<","<<j.second<<"),";
              }cout<<endl;
        }
  }
  
  void dfs(int node,unordered_map<int,bool> &visited,stack<int> &s){
        visited[node]=true;
        for(auto i:adj[node]){
              if(!visited[i.first]){
                    dfs(i.first,visited,s);
              }
        }
        s.push(node);
  }
  
  void getpath(int src,vector<int> &dist,stack<int> &s){
        dist[src]=0;
        while(!s.empty()){
              int element=s.top();
              s.pop();
              if(dist[element]!=INT_MAX){
                    for(auto i:adj[element]){
                        if(dist[element]+i.second<dist[i.first]){
                              dist[i.first]=dist[element]+i.second;
                        }  
                        
                    }
              }
        }
  }
};
int main()
{
    
    graph g;
    g.addedge(0,1,5);
    g.addedge(0,2,3);
    g.addedge(1,2,2);
    g.addedge(1,3,6);
    g.addedge(2,3,7);
    g.addedge(2,4,4);
    g.addedge(2,5,2);
    g.addedge(3,4,-1);
    g.addedge(4,5,-2);
    g.print();
    
    //topological sort
    unordered_map<int,bool> visited;
    stack<int> s;
    for(int i=0;i<6;i++){
          if(!visited[i]){
                g.dfs(i,visited,s);
          }
    }
    int src=1;
    vector<int> dis(6);
    for(int i=0;i<6;i++){
          dis[i]=INT_MAX;
    }
    g.getpath(src,dis,s);
    for(int i=0;i<dis.size();i++){
          cout<<dis[i]<<" ";
    }cout<<endl;
    
    return 0;
}
